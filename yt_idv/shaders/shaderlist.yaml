shader_definitions:
  fragment:
    constant:
      info: A constant value applied
      source: constant.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: func add
    apply_colormap:
      info:
        A second pass fragment shader used to apply a colormap to the result of
        the first pass rendering
      source: apply_colormap.frag.glsl
      blend_func:
        - src alpha
        - dst alpha
      blend_equation: func add
    expand_1d:
      info: This expands a 1D texture along the y dimension
      source: expand_1d.frag.glsl
      blend_func:
        - one
        - zero
      blend_equation: func add
    draw_blocks:
      info:
        A first pass fragment shader that performs ray casting using transfer function.
        See :ref:`volume-rendering-method` for more details.
      source: block_outline.frag.glsl
      blend_func:
        - src alpha
        - one minus src alpha
      blend_equation: func add
    max_intensity:
      info:
        A first pass fragment shader that computes Maximum Intensity Projection
        of the data. See :ref:`projection-types` for more information.
      source:
        - ray_tracing.frag.glsl
        - max_intensity.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: max
    mesh:
      info: A vertex shader used for unstructured mesh rendering.
      source: mesh.frag.glsl
      depth_test: less
      blend_func:
        - one
        - zero
      blend_equation: func add
    noop:
      info:
        A second pass fragment shader that performs no operation.  Usually used
        if the first pass already took care of applying proper color to the data
      source: noop.frag.glsl
    passthrough:
      info:
        A first pass fragment shader that performs no operation. Used for debug
        puproses. It's distinct from NoOpFragmentShader, because of the number of uniforms
      source: passthrough.frag.glsl
      blend_func:
        - src alpha
        - dst alpha
      blend_equation: func add
    draw_lines:
      info: A line drawing fragment shader
      source: draw_lines.frag.glsl
      blend_func:
        - one
        - zero
      blend_equation: func add
    projection:
      info:
        A first pass fragment shader that performs unweighted integration of the
        data along the line of sight. See :ref:`projection-types` for more information.
      source:
        - ray_tracing.frag.glsl
        - projection.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: func add
    text_overlay:
      info: A simple text overlay shader
      source: textoverlay.frag.glsl
      blend_func:
        - src alpha
        - one minus src alpha
      blend_equation: func add
    transfer_function:
      info:
        A first pass fragment shader that performs ray casting using transfer function.
        See :ref:`volume-rendering-method` for more details.
      source:
        - ray_tracing.frag.glsl
        - transfer_function.frag.glsl
      blend_func_separate:
        - one minus dst alpha
        - one
        - one minus dst alpha
        - one
      blend_equation_separate:
        - func add
        - func add
    sph_kernel:
      info: Sample pre-integrated SPH kernel
      source: sph_kernel.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: func add
    field_value:
      info: Use field values as input
      source: field_value.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: func add
    disk:
      info: Render some disk values
      source: disk.frag.glsl
      blend_func:
        - one
        - one
      blend_equation: func add
  vertex:
    default:
      info:
        A first pass vertex shader that tranlates the location of vertices from
        the world coordinates to the viewing plane coordinates
      source: default.vert.glsl
    mesh:
      info: A vertex shader used for unstructured mesh rendering.
      source: mesh.vert.glsl
      depth_test: less
    passthrough:
      info: A second pass vertex shader that performs no operations on vertices
      source: passthrough.vert.glsl
    grid_position:
      info: Pass some grid positions on through
      source: grid_position.vert.glsl
    draw_lines:
      info: A line drawing vertex shader
      source: draw_lines.vert.glsl
    text_overlay:
      info: A simple text overlay shader
      source: textoverlay.vert.glsl
    particle:
      info: A billboard particle vertex shader
      source: particle.vert.glsl
    octree_position:
      info: Expect instanced rendering of octree nodes
      source: octree_position.vert.glsl
    disk:
      info: Rendering some sliced data in a disk
      source: disk.vert.glsl
  geometry:
    grid_expand:
      info: Expand grid left and right edges into a set of triangles
      source: grid_expand.geom.glsl
    particle_expand:
      info: Expand particles from points to triangulated quads
      source: particle_expand.geom.glsl
component_shaders:
  block_rendering:
    default_value: max_intensity
    max_intensity:
      description: Maximum Intensity
      first_vertex: grid_position
      first_geometry: grid_expand
      first_fragment: max_intensity
      second_vertex: passthrough
      second_fragment: apply_colormap
    projection:
      description: Projective integration
      first_vertex: grid_position
      first_geometry: grid_expand
      first_fragment: projection
      second_vertex: passthrough
      second_fragment: apply_colormap
    transfer_function:
      description: Color transfer function
      first_vertex: grid_position
      first_geometry: grid_expand
      first_fragment: transfer_function
      second_vertex: passthrough
      second_fragment: passthrough
  octree_block_rendering:
    default_value: max_intensity
    max_intensity:
      description: Maximum Intensity
      first_vertex: octree_position
      first_fragment: max_intensity
      second_vertex: passthrough
      second_fragment: apply_colormap
    projection:
      description: Projective integration
      first_vertex: octree_position
      first_fragment: projection
      second_vertex: passthrough
      second_fragment: apply_colormap
    transfer_function:
      description: Color transfer function
      first_vertex: octree_position
      first_fragment: transfer_function
      second_vertex: passthrough
      second_fragment: passthrough
  block_outline:
    default_value: default
    default:
      description: Default
      first_vertex: grid_position
      first_geometry: grid_expand
      first_fragment: draw_blocks
      second_vertex: passthrough
      second_fragment: passthrough
  grid_outline:
    default_value: default
    default:
      description: Default
      first_vertex: grid_position
      first_geometry: grid_expand
      first_fragment: draw_blocks
      second_vertex: passthrough
      second_fragment: passthrough
  box_outline:
    default_value: default
    default:
      description: Default
      first_vertex: default
      first_fragment: draw_blocks
      second_vertex: passthrough
      second_fragment: passthrough
  text_annotation:
    default_value: default
    default:
      description: Default
      first_vertex: text_overlay
      first_fragment: text_overlay
      second_vertex: passthrough
      second_fragment: passthrough
  mesh_rendering:
    default_value: default
    default:
      description: Default
      first_vertex: mesh
      first_fragment: mesh
      second_vertex: passthrough
      second_fragment: apply_colormap
  rgba_line_plot:
    default_value: default
    default:
      description: Default
      first_vertex: draw_lines
      first_fragment: draw_lines
      second_vertex: passthrough
      second_fragment: passthrough
  rgba_display:
    default_value: default
    default:
      description: Display an image
      first_vertex: passthrough
      first_fragment: expand_1d
      second_vertex: passthrough
      second_fragment: passthrough
  sph_rendering:
    default_value: default
    default:
      description: Display the particles as integrated SPH splats
      first_vertex: particle
      first_fragment: sph_kernel
      second_vertex: passthrough
      second_fragment: apply_colormap
  particle_rendering:
    default_value: default
    default:
      description: Display the particles as constant circles
      first_vertex: particle
      first_fragment: field_value
      second_vertex: passthrough
      second_fragment: apply_colormap
  disk_slice:
    default_value: default
    default:
      description: Display a disk-optimized visualization
      first_vertex: disk
      first_fragment: disk
      second_vertex: passthrough
      second_fragment: apply_colormap
